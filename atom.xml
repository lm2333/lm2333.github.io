<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-09T13:21:38.529Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转载】缓存更新</title>
    <link href="http://example.com/2021/12/09/huan-cun-yi-zhi-xing/"/>
    <id>http://example.com/2021/12/09/huan-cun-yi-zhi-xing/</id>
    <published>2021-12-09T13:20:34.000Z</published>
    <updated>2021-12-09T13:21:38.529Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://coolshell.cn/articles/17416.html">陈皓：缓存更新的套路</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://coolshell.cn/articles/17416.html&quot;&gt;陈皓：缓存更新的套路&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>复制</title>
    <link href="http://example.com/2021/12/09/fu-zhi/"/>
    <id>http://example.com/2021/12/09/fu-zhi/</id>
    <published>2021-12-09T13:18:56.000Z</published>
    <updated>2021-12-09T13:18:56.606Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>GFS</title>
    <link href="http://example.com/2021/12/08/gfs/"/>
    <id>http://example.com/2021/12/08/gfs/</id>
    <published>2021-12-08T02:16:11.000Z</published>
    <updated>2021-12-09T13:16:20.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么分布式存储很难"><a href="#为什么分布式存储很难" class="headerlink" title="为什么分布式存储很难"></a>为什么分布式存储很难</h2><h3 id="对性能的追求"><a href="#对性能的追求" class="headerlink" title="对性能的追求"></a>对性能的追求</h3><p>想要提高性能，很自然地想到使用多台服务器进行数据存储，当我们用到的服务器数量很多的时候，比如成百上千台时，服务器出错就不可避免。因此需要使用一个自动化的容错机制来进行处理，为什么是自动化的？因为服务器太多，并且有可能每时每刻都发生错误，人工处理错误是不现实的，也是不可能的。</p><h3 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h3><p>最简单的容错机制是对数据进行复制，但是复制数据，又会带来数据不一致的问题。</p><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>为了追求数据的一致性，我们需要做一些额外的工作：在各个服务器之间进行通信。（但这会导致服务器性能下降，这违反了我们的初衷）</p><h2 id="GFS的设计目的"><a href="#GFS的设计目的" class="headerlink" title="GFS的设计目的"></a>GFS的设计目的</h2><p>大型文件（GB或TB级）的顺序读写，所以设计重点放在了吞吐量上，而不是网络时延上</p><h2 id="GFS是如何保证一致性和容错的"><a href="#GFS是如何保证一致性和容错的" class="headerlink" title="GFS是如何保证一致性和容错的"></a>GFS是如何保证一致性和容错的</h2><p>GFS将服务器分为了Master和Chunk Server两种类型，其中Master负责保存文件的索引信息，比如文件存储在哪个Chunk Server中。</p><h3 id="Master是如何维护文件信息的"><a href="#Master是如何维护文件信息的" class="headerlink" title="Master是如何维护文件信息的"></a>Master是如何维护文件信息的</h3><p>Master中含有两张表，一张是文件名到chunk ID list的映射表，一张是chunk ID到实际服务器名的表。第二张表不仅仅包含了服务器名，因为一个chunk有多个副本，所以存放了一个服务器列表，每个chunk都有自己的版本号，对于所有的写操作都需要在主chunk顺序执行，所以master需要记录哪个是主chunk，并且每个主chunk只在特定的时间内担任主chunk，所以有过期时间</p><h3 id="租约的作用"><a href="#租约的作用" class="headerlink" title="租约的作用"></a>租约的作用</h3><p>避免脑裂问题</p><h3 id="版本号的作用以及更新时机"><a href="#版本号的作用以及更新时机" class="headerlink" title="版本号的作用以及更新时机"></a>版本号的作用以及更新时机</h3><p>确定哪个节点是Primary节点。版本号只会在Master指定一个新的Primary时才进行更新。</p><h3 id="脑裂问题"><a href="#脑裂问题" class="headerlink" title="脑裂问题"></a>脑裂问题</h3><h4 id="什么是脑裂问题"><a href="#什么是脑裂问题" class="headerlink" title="什么是脑裂问题"></a>什么是脑裂问题</h4><p>举个例子：由于网络原因，Master无法ping通Primary节点，但是客户端还可以和Primary节点通信，Master返回给客户端另一个Primary节点，导致有两个不同的Primary节点同时处理写请求。</p><h4 id="如何解决脑裂问题"><a href="#如何解决脑裂问题" class="headerlink" title="如何解决脑裂问题"></a>如何解决脑裂问题</h4><p>可以通过租约时间。Primary节点只在租约时间内有效，当租约过期了，Primary节点会拒绝写请求，所以Master节点可以等到租约时间过期后，再指定Primary节点，避免脑裂问题。</p><h3 id="GFS的一致性"><a href="#GFS的一致性" class="headerlink" title="GFS的一致性"></a>GFS的一致性</h3><p>一个写入操作，如果成功，他在所有的副本上都成功，如果失败，则有可能是一部分副本 成功，而另外一部分失败。</p><p>在这样的行为如下，失败是这样处理的:</p><ul><li>如果是 write 失败，那么客户端可以重试，直到 write 成功，达到一致的状态。但是如果在 重试达到成功以前出现宕机，那么就变成了永久的不一致了。</li><li>Record Append 在写入失败后，也会重试，但是与 writ e 的重试不同，不是在原有的 off set 上重试，而是接在失败的记录后面重试，这样 Record Append 留下的不一致是永久的不一 致，并且还会有重复问题，如果一条记录在一部分副本上成功，在另外一部分副本上失 败，那么这次 Record Append 就会报告给客户端失败，并且让客户端重试，如果重试后成 功，那么在某些副本上，这条记录就会成功的写入 2 次。</li></ul><p>我们可以得出，Record Append 保证是至少一次的原子操作(at least once atomic)。</p><p>参考：<a href="https://www.infoq.cn/article/6r4tafyggnyynu7tesiy">从 GFS 失败的架构设计来看一致性的重要性</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么分布式存储很难&quot;&gt;&lt;a href=&quot;#为什么分布式存储很难&quot; class=&quot;headerlink&quot; title=&quot;为什么分布式存储很难&quot;&gt;&lt;/a&gt;为什么分布式存储很难&lt;/h2&gt;&lt;h3 id=&quot;对性能的追求&quot;&gt;&lt;a href=&quot;#对性能的追求&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring揭秘</title>
    <link href="http://example.com/2021/12/07/spring-jie-mi/"/>
    <id>http://example.com/2021/12/07/spring-jie-mi/</id>
    <published>2021-12-07T13:15:46.000Z</published>
    <updated>2021-12-07T14:53:09.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要Spring"><a href="#为什么需要Spring" class="headerlink" title="为什么需要Spring"></a>为什么需要Spring</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么需要Spring&quot;&gt;&lt;a href=&quot;#为什么需要Spring&quot; class=&quot;headerlink&quot; title=&quot;为什么需要Spring&quot;&gt;&lt;/a&gt;为什么需要Spring&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学习git</title>
    <link href="http://example.com/2021/12/03/xue-xi-git/"/>
    <id>http://example.com/2021/12/03/xue-xi-git/</id>
    <published>2021-12-03T12:44:26.000Z</published>
    <updated>2021-12-07T13:15:53.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git中的状态"><a href="#Git中的状态" class="headerlink" title="Git中的状态"></a>Git中的状态</h2><p>git中有四种状态，分别是未追踪，追踪，已修改和暂存</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>git add 命令的作用有以下三点</p><ol><li>开始追踪文件</li><li>将文件放入暂存区</li><li>把有冲突的文件标记为冲突已经解决</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filname</span><br></pre></td></tr></table></figure><p>撤销暂存的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>提交文件，直接使用</p><h4 id="修改最后一次提交"><a href="#修改最后一次提交" class="headerlink" title="修改最后一次提交"></a>修改最后一次提交</h4><p>如果提交之后发现漏掉了某个文件，可以使用撤销操作，该操作会替换上次的提交记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend </span><br><span class="line"></span><br><span class="line"># 修改最后一次提交，但是不修改提交信息</span><br><span class="line">git commit --amend --no-edit</span><br></pre></td></tr></table></figure><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p>git status命令的作用是显示当前文件的状态，-s参数可以用更简洁的形式输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line">MM Rakefile</span><br><span class="line">A  lib/git.rb</span><br><span class="line">M  lib/simplegit.rb</span><br><span class="line">?? LICENSE.txt</span><br></pre></td></tr></table></figure><p>输出有两栏，左侧表示暂存区，右侧表示工作区</p><p>M：表示已经修改</p><p>A：表示添加到暂存区</p><p>??：表示还没被追踪</p><p>上表中Rakefile表示已经做了修改，暂存后又做了修改。</p><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><p>使用diff 命令查看已经修改的部分和原始版本的不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>使用diff命令查看已经暂存的文件和原始版本的不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gif diff --staged</span><br></pre></td></tr></table></figure><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p>使用log命令可以查看提交历史，其中一个非常有用的参数是-S，可以搜索添加或者删除某个字符串的提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -S function_name</span><br></pre></td></tr></table></figure><p><a href="http://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">http://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2</a></p><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>原则：变基时，不要修改已经推送到远端的提交</p><p>使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#切换到开发分支</span><br><span class="line">git checkout featureA</span><br><span class="line">#变基</span><br><span class="line">git rebase master</span><br><span class="line">#推送</span><br><span class="line">git push</span><br><span class="line">#合并</span><br><span class="line">git checkout master</span><br><span class="line">git merge featureA</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>用户可以在.gitignore文件中指定忽略的文件，该文件支持正则表达式，下面直接给出例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略所有的 .a 文件</span></span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略任何目录下名为 build 的文件夹</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h3 id="配置缩写"><a href="#配置缩写" class="headerlink" title="配置缩写"></a>配置缩写</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git中的状态&quot;&gt;&lt;a href=&quot;#Git中的状态&quot; class=&quot;headerlink&quot; title=&quot;Git中的状态&quot;&gt;&lt;/a&gt;Git中的状态&lt;/h2&gt;&lt;p&gt;git中有四种状态，分别是未追踪，追踪，已修改和暂存&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>所思所感</title>
    <link href="http://example.com/2021/12/03/hello-world/"/>
    <id>http://example.com/2021/12/03/hello-world/</id>
    <published>2021-12-03T03:54:55.135Z</published>
    <updated>2021-12-08T02:49:27.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h1><p>以前觉得创新就是要特别不一样，但是读了一篇文章后，发现创新多是在已有方法上做的一点点改进，针对特定的场景，提出特定的方案。比如GFS里面提到的容错、分片都是已有的，但是它的创新点在于使用了上百台的服务器，解决了谷歌存储大文件的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创新&quot;&gt;&lt;a href=&quot;#创新&quot; class=&quot;headerlink&quot; title=&quot;创新&quot;&gt;&lt;/a&gt;创新&lt;/h1&gt;&lt;p&gt;以前觉得创新就是要特别不一样，但是读了一篇文章后，发现创新多是在已有方法上做的一点点改进，针对特定的场景，提出特定的方案。比如GFS里面提到</summary>
      
    
    
    
    
  </entry>
  
</feed>
